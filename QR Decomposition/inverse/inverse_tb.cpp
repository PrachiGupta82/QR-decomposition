#include "inv_header.h"

int main()
{
	hls::stream <arr_in> Q_in;
	hls::stream < arr_in > R_in;
	hls::stream <in32> div;
	hls::stream < arr_out >X_out;

	arr_in temp_Q_in;
	arr_in temp_R_in;
	in32 temp_div[N];
	arr_out temp_X_out;

	complex_tin arr[74]={{0.2678, -0.4882}, {-0.5998, 0.2345}, {-0.0087, -0.1907}, {-0.7017, -0.3451}, {0.4566, 0.2486}, {0.7155, -0.6986}, {0.0323, -0.5136}, {0.7070, 0.1338},
		        {-0.1562, -0.1630}, {-0.3559, 0.1913}, {0.4171, -0.4512}, {0.3648, -0.1153}, {0.1147, 0.0585}, {0.3179, 0.0915}, {-0.6028, 0.5314}, {0.2227, -0.4093},
		        {-0.1982, 0.4953}, {-0.2461, -0.3109}, {0.3214, -0.0154}, {0.0000, 0.0716}, {-0.4739, 0.2961}, {0.0007, 0.5708}, {0.4755, 0.2164}, {0.4489, -0.1725},
		        {0.7294, 0.4534}, {0.2686, -0.1022}, {0.6035, -0.2399}, {-0.0300, 0.6618}, {-0.3887, 0.2489}, {-0.0432, 0.2529}, {0.4746, -0.1849}, {-0.0691, 0.1241},
		        {-0.6909, -0.6570}, {-0.5432, -0.7242}, {0.5843, 0.6750}, {0.6049, -0.1230}, {0.5777, -0.4811}, {-0.6582, -0.4627}, {0.3325, -0.4620}, {-0.1010, -0.3710},
		        {0.5757, -0.1506}, {0.3307, 0.7235}, {-0.2479, 0.6283}, {0.1642, 0.7220}, {-0.7045, -0.5560}, {0.2720, -0.1959}, {-0.5233, -0.1072}, {0.4862, -0.3132},
		        {0.6177, 0.0402}, {-0.5878, -0.4975}, {0.2971, -0.6686}, {0.1759, -0.2968}, {-0.0151, 0.7460}, {-0.6839, -0.0587}, {0.2386, -0.0269}, {-0.6226, 0.1750},
		        {0.4427, -0.1244}, {0.2298, -0.5886}, {-0.4517, 0.3555}, {0.5373, 0.3006}, {-0.4963, -0.4916}, {-0.6406, 0.7199}, {0.0278, -0.5671}, {-0.5483, -0.3508},
				{0.5757, -0.1506}, {0.3307, 0.7235}, {-0.2479, 0.6283},{0.4427, -0.1244}, {0.2298, -0.5886},{-0.1562, -0.1630}, {-0.3559, 0.1913}, {0.4171, -0.4512}, {0.3648, -0.1153},{0.4489, -0.1725}};


	    // Initialize an array of complex numbers
	complex_tin complex_numbers[] = {
	        {0.14875, -0.271196},
	        {-0.341326, 0.186741},
	        {0.105747, 0.0325623},
	        {-0.600355, -0.149807},
	        {-0.150713, -0.266928},
	        {0.237423, -0.20956},
	        {0.159996, -0.124241},
	        {0.129129, -0.32548},
	        {-0.0867767, -0.0905571},
	        {-0.179415, 0.115799},
	        {0.291452, -0.242208},
	        {0.30201, 0.145008},
	        {0.0923347, -0.0114002},
	        {0.326958, 0.0366707},
	        {-0.231867, 0.584572},
	        {0.0148811, -0.41254},
	        {-0.110104, 0.27511},
	        {-0.140924, -0.227499},
	        {-0.0232449, 0.0594463},
	        {0.0186081, 0.241001},
	        {-0.371681, 0.483393},
	        {0.140619, -0.0328217},
	        {0.464249, 0.0538597},
	        {0.379391, -0.151665},
	        {0.405148, 0.251852},
	        {0.0668392, -0.0682831},
	        {0.467901, -0.0435028},
	        {-0.185757, 0.311024},
	        {0.0301476, -0.143543},
	        {0.0655689, 0.368225},
	        {0.317823, 0.053051},
	        {-0.36282, 0.119631},
	        {-0.383791, -0.364956},
	        {-0.216379, -0.376556},
	        {0.12878, 0.271152},
	        {0.104317, 0.282436},
	        {0.379688, -0.243559},
	        {-0.109076, -0.13386},
	        {0.333143, 0.000938416},
	        {-0.0436478, 0.0626793},
	        {0.319778, -0.0836582},
	        {0.140373, 0.443996},
	        {0.199966, 0.527075},
	        {0.348959, 0.0621376},
	        {-0.128994, -0.111715},
	        {-0.0705757, -0.277079},
	        {0.134409, 0.143251},
	        {0.239494, 0.153547},
	        {0.343103, 0.0223255},
	        {-0.387728, -0.258028},
	        {0.0810509, -0.252642},
	        {-0.0254459, 0.0129013},
	        {-0.134424, 0.0383968},
	        {-0.599731, -0.354176},
	        {-0.129812, 0.24971},
	        {-0.00380707, 0.0992508},
	        {0.245903, -0.0691128},
	        {0.0945206, -0.301634},
	        {-0.341183, 0.156654},
	        {0.296358, 0.101479},
	        {-0.342913, -0.366491},
	        {-0.0881901, 0.16206},
	        {-0.00851822, -0.111221},
	        {-0.153973, -0.523212}
	    };

	complex_tin arr_R[]={{1.80025, 0}, {0.287783, -0.13146}, {-0.451546, -0.335207}, {0.112104, 0.587059}, {-0.277431, 0.722433}, {0.544739, 0.186611}, {0.311066, -0.448927}, {0.028511, 0.226301},
	        {0, 0}, {1.77835, 0}, {-0.373816, 0.705313}, {0.260349, 0.893183}, {-0.541611, -0.286226}, {-0.300718, -0.589596}, {0.059967, 0.710709}, {0.000232697, -0.644651},
	        {0, 0}, {0, 0}, {1.45074, 0}, {0.421089, 0.0593529}, {-0.675838, 0.520737}, {0.157705, -0.276817}, {-0.401636, 0.20623}, {0.0406513, -0.318619},
	        {0, 0}, {0, 0}, {0, 0}, {1.10698, 0}, {-0.599094, -0.363108}, {-0.208181, 0.826132}, {-0.473013, 0.0169792}, {-0.563543, -0.437643},
	        {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1.01731, 0}, {0.240236, -0.630497}, {0.522709, -0.059576}, {0.0442638, -0.176723},
	        {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {1.26827, 0}, {-0.175327, 0.0433865}, {0.723709, 0.0401115},
	        {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0.942247, 0}, {0.143799, -0.147682},
	        {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0.793602, 0}};

	//mydata arr2[8]={1.8003,1.7784,1.4508,1.1070,1.0172,1.2682,0.9424,0.7935};
	mydata arr2[8]={0.5555,  0.5623, 0.6893, 0.9033,  0.9830, 0.7885, 1.0611, 1.2602};

	for(int n=0;n<N;n++)
	{
		for(int m=0;m<N;m++)
		{
			temp_Q_in.elements[m]=complex_numbers[8*n+m];
			//temp_R_in.elements[m]=arr[m+8];
		}

		div<<arr2[n];
		Q_in<<temp_Q_in;
		inverse(Q_in,R_in,div,X_out);
	}

	for(int n=0;n<N;n++)
		{
			for(int m=0;m<N;m++)
			{
				//temp_Q_in.elements[m]=arr[m];
				temp_R_in.elements[m]=arr_R[8*n+m];
			}

			//div<<0.1;
			R_in<<temp_R_in;
			inverse(Q_in,R_in,div,X_out);
		}

//inverse(Q_in,R_in,div,X_out);

	for(int n=7;n>=0;n--)
	{
		inverse(Q_in,R_in,div,X_out);
		X_out>>temp_X_out;
		cout<<n<<"in_tb --";
			for(int m=0;m<N;m++)
			{
				cout<<temp_X_out.elements[m]<<"  ";
			}
			cout<<endl;
		//inverse(Q_in,R_in,div,X_out);
	}
	inverse(Q_in,R_in,div,X_out);

////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
////	inverse(Q_in,R_in,div,X_out);
//
//
//	for(int m=0;m<64;m++)
//	{
//	inverse(Q_in,R_in,div,X_out);
//	X_out>>temp_X_out;
//	cout<<m<<"---"<<temp_X_out<<endl;
//	}


}
